function cov_msjtrq8s5(){var path="C:\\nodejs\\CropDeal\\BackEnd\\admin\\AdminServer.js";var hash="217e0f20b6848351de433cba807d36c86fc3b51e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\nodejs\\CropDeal\\BackEnd\\admin\\AdminServer.js",statementMap:{"0":{start:{line:2,column:14},end:{line:2,column:32}},"1":{start:{line:3,column:15},end:{line:3,column:34}},"2":{start:{line:4,column:13},end:{line:4,column:30}},"3":{start:{line:5,column:17},end:{line:5,column:39}},"4":{start:{line:6,column:11},end:{line:6,column:26}},"5":{start:{line:7,column:14},end:{line:7,column:32}},"6":{start:{line:8,column:10},end:{line:8,column:33}},"7":{start:{line:9,column:11},end:{line:9,column:33}},"8":{start:{line:10,column:12},end:{line:10,column:28}},"9":{start:{line:12,column:22},end:{line:12,column:41}},"10":{start:{line:14,column:10},end:{line:14,column:19}},"11":{start:{line:15,column:0},end:{line:15,column:48}},"12":{start:{line:16,column:0},end:{line:16,column:27}},"13":{start:{line:17,column:0},end:{line:17,column:23}},"14":{start:{line:19,column:19},end:{line:19,column:43}},"15":{start:{line:20,column:16},end:{line:20,column:45}},"16":{start:{line:23,column:20},end:{line:39,column:3}},"17":{start:{line:41,column:16},end:{line:41,column:37}},"18":{start:{line:42,column:2},end:{line:46,column:4}},"19":{start:{line:90,column:16},end:{line:102,column:1}},"20":{start:{line:91,column:4},end:{line:101,column:5}},"21":{start:{line:92,column:21},end:{line:92,column:60}},"22":{start:{line:93,column:8},end:{line:93,column:27}},"23":{start:{line:94,column:22},end:{line:94,column:49}},"24":{start:{line:95,column:8},end:{line:95,column:29}},"25":{start:{line:96,column:4},end:{line:96,column:11}},"26":{start:{line:98,column:8},end:{line:100,column:10}},"27":{start:{line:105,column:0},end:{line:114,column:2}},"28":{start:{line:106,column:4},end:{line:106,column:50}},"29":{start:{line:107,column:4},end:{line:108,column:65}},"30":{start:{line:109,column:4},end:{line:112,column:5}},"31":{start:{line:110,column:8},end:{line:110,column:79}},"32":{start:{line:111,column:8},end:{line:111,column:39}},"33":{start:{line:113,column:4},end:{line:113,column:11}},"34":{start:{line:117,column:12},end:{line:117,column:113}},"35":{start:{line:118,column:0},end:{line:124,column:3}},"36":{start:{line:120,column:4},end:{line:120,column:43}},"37":{start:{line:123,column:4},end:{line:123,column:46}},"38":{start:{line:151,column:0},end:{line:151,column:44}},"39":{start:{line:172,column:0},end:{line:172,column:52}},"40":{start:{line:200,column:0},end:{line:200,column:36}},"41":{start:{line:226,column:0},end:{line:226,column:42}},"42":{start:{line:252,column:0},end:{line:252,column:48}},"43":{start:{line:274,column:0},end:{line:274,column:52}},"44":{start:{line:277,column:0},end:{line:281,column:2}},"45":{start:{line:278,column:16},end:{line:278,column:38}},"46":{start:{line:279,column:4},end:{line:279,column:21}},"47":{start:{line:280,column:4},end:{line:280,column:16}},"48":{start:{line:283,column:0},end:{line:290,column:2}},"49":{start:{line:284,column:4},end:{line:284,column:36}},"50":{start:{line:285,column:4},end:{line:289,column:6}},"51":{start:{line:292,column:0},end:{line:292,column:82}},"52":{start:{line:292,column:34},end:{line:292,column:80}},"53":{start:{line:294,column:0},end:{line:294,column:26}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:90,column:16},end:{line:90,column:17}},loc:{start:{line:90,column:32},end:{line:102,column:1}},line:90},"1":{name:"(anonymous_1)",decl:{start:{line:105,column:8},end:{line:105,column:9}},loc:{start:{line:105,column:24},end:{line:114,column:1}},line:105},"2":{name:"(anonymous_2)",decl:{start:{line:119,column:6},end:{line:119,column:7}},loc:{start:{line:119,column:10},end:{line:121,column:1}},line:119},"3":{name:"(anonymous_3)",decl:{start:{line:122,column:7},end:{line:122,column:8}},loc:{start:{line:122,column:14},end:{line:124,column:1}},line:122},"4":{name:"(anonymous_4)",decl:{start:{line:277,column:8},end:{line:277,column:9}},loc:{start:{line:277,column:24},end:{line:281,column:1}},line:277},"5":{name:"(anonymous_5)",decl:{start:{line:283,column:8},end:{line:283,column:9}},loc:{start:{line:283,column:30},end:{line:290,column:1}},line:283},"6":{name:"(anonymous_6)",decl:{start:{line:292,column:30},end:{line:292,column:31}},loc:{start:{line:292,column:34},end:{line:292,column:80}},line:292}},branchMap:{"0":{loc:{start:{line:109,column:4},end:{line:112,column:5}},type:"if",locations:[{start:{line:109,column:4},end:{line:112,column:5}},{start:{line:109,column:4},end:{line:112,column:5}}],line:109},"1":{loc:{start:{line:284,column:15},end:{line:284,column:34}},type:"binary-expr",locations:[{start:{line:284,column:15},end:{line:284,column:27}},{start:{line:284,column:31},end:{line:284,column:34}}],line:284}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"217e0f20b6848351de433cba807d36c86fc3b51e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_msjtrq8s5=function(){return actualCoverage;};}return actualCoverage;}cov_msjtrq8s5();//import libraries
const express=(cov_msjtrq8s5().s[0]++,require("express"));const mongoose=(cov_msjtrq8s5().s[1]++,require("mongoose"));const morgan=(cov_msjtrq8s5().s[2]++,require("morgan"));const bodyParser=(cov_msjtrq8s5().s[3]++,require("body-parser"));const cors=(cov_msjtrq8s5().s[4]++,require("cors"));const bcrypt=(cov_msjtrq8s5().s[5]++,require("bcrypt"));const jwt=(cov_msjtrq8s5().s[6]++,require("jsonwebtoken"));const core=(cov_msjtrq8s5().s[7]++,require("./adminCore"));const axios=(cov_msjtrq8s5().s[8]++,require("axios"));const{secretKey}=(cov_msjtrq8s5().s[9]++,require("./config"));const app=(cov_msjtrq8s5().s[10]++,express());cov_msjtrq8s5().s[11]++;app.use(bodyParser.urlencoded({extended:false}));cov_msjtrq8s5().s[12]++;app.use(bodyParser.json());cov_msjtrq8s5().s[13]++;app.use(morgan("dev"));const swaggerJsdoc=(cov_msjtrq8s5().s[14]++,require("swagger-jsdoc"));const swaggerUi=(cov_msjtrq8s5().s[15]++,require("swagger-ui-express"));//swagger 
const options=(cov_msjtrq8s5().s[16]++,{definition:{openapi:"3.0.0",info:{title:"CROP DEAL CASE STUDY Admin API with Swagger",version:"0.1.0",description:"This is a simple CRUD API application made with Express and documented with Swagger"},servers:[{url:"http://localhost:2000"}]},apis:["AdminServer.js"]});const specs=(cov_msjtrq8s5().s[17]++,swaggerJsdoc(options));cov_msjtrq8s5().s[18]++;app.use("/api-docs",swaggerUi.serve,swaggerUi.setup(specs,{explorer:true}));//console.log(specs);
//schema
/**
 * @swagger
 * components:
 *   schemas:
 *      Admin:
 *       type: object
 *       required:
 *         - name
 *         - email
 *         - password
 *         - contact
 *         - gender
 *       properties:
 *         id:
 *           type: string
 *           description: The auto-generated id of the User
 *         name:
 *           type: string
 *           description: The admin name
 *         contact:
 *           type: number
 *           description: contact number
 *         gender:
 *           type: string
 *           description: gender of addmin
 *         password:
 *           type: string
 *           description: password of admin
 *
 *       example:
 *         id: 1254gfg645
 *         name: TestAdmin
 *         email : "Abcd12@email.com"
 *         password: "Test@123"
 *         gender: "MALE"
 *         contact: 1234567869
 */ //checking Authorization in middleware
cov_msjtrq8s5().s[19]++;const CheckAuth=(req,res,next)=>{cov_msjtrq8s5().f[0]++;cov_msjtrq8s5().s[20]++;try{const token=(cov_msjtrq8s5().s[21]++,req.headers.authorization.split(" ")[1]);cov_msjtrq8s5().s[22]++;console.log(token);const decoded=(cov_msjtrq8s5().s[23]++,jwt.verify(token,secretKey));cov_msjtrq8s5().s[24]++;req.userdata=decoded;cov_msjtrq8s5().s[25]++;next();}catch(error){cov_msjtrq8s5().s[26]++;return res.status(401).json({message:"Auth failed in middleware"});}};//for browsers only
cov_msjtrq8s5().s[27]++;app.use((req,res,next)=>{cov_msjtrq8s5().f[1]++;cov_msjtrq8s5().s[28]++;res.header("Access-Control-Allow-Origin",'*');cov_msjtrq8s5().s[29]++;res.header("Access-Control-Allow-Headers",'Origin,X-Requested-With,Content-Type,Accept,Authorization');cov_msjtrq8s5().s[30]++;if(req.method==='OPTIONS'){cov_msjtrq8s5().b[0][0]++;cov_msjtrq8s5().s[31]++;res.header('Access-Control-Allow-Methods','PUT,POST,PATCH,DELETE,GET');cov_msjtrq8s5().s[32]++;return res.status(200).json({});}else{cov_msjtrq8s5().b[0][1]++;}cov_msjtrq8s5().s[33]++;next();});//connecting to database
const dbURI=(cov_msjtrq8s5().s[34]++,"mongodb+srv://admin:123@mongodbpractise.bjozc.mongodb.net/CropdealADMIN?retryWrites=true&w=majority");cov_msjtrq8s5().s[35]++;mongoose.connect(dbURI,{useNewUrlParser:true,useUnifiedTopology:true,useCreateIndex:true}).then(()=>{cov_msjtrq8s5().f[2]++;cov_msjtrq8s5().s[36]++;console.log("admin database connected");}).catch(err=>{cov_msjtrq8s5().f[3]++;cov_msjtrq8s5().s[37]++;console.log("db connection error:"+err);});/**
 * @swagger
 * /admin:
 *   get:
 *    discription: Get admin with check_auth
 *    parameters:
 *      - name: 
 *        description: name
 *        required: true
 *        type: String
 *    responses:
 *      '200':
 *       description:Success
 *   /ping:
 *     get:
 *       summary: Checks if the server is running
 *       security: []   # No security
 *       responses:
 *         '200':
 *           description: Server is up and running
 *         default:
 *           description: Something is wrong
 */ //get all details
cov_msjtrq8s5().s[38]++;app.get("/admin",CheckAuth,core.get_admins);/**
 * @swagger
 * /admin/:id:
 *   get:
 *    discription: Get admin with check_auth
 *    responses:
 *      '200':
 *       description:Success
 *   /ping:
 *     get:
 *       summary: Checks if the server is running
 *       security: []   # No security
 *       responses:
 *         '200':
 *           description: Server is up and running
 *         default:
 *           description: Something is wrong
 */ //get admin by id
cov_msjtrq8s5().s[39]++;app.get("/admin/:id",CheckAuth,core.get_admin_by_id);/**
 * @swagger
 * /login:
 *   post:
 *    discription: login admin
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Admin'
 *    responses:
 *      '200':
 *       description:Success
 *   /ping:
 *     get:
 *       summary: Checks if the server is running
 *       security: []   # No security
 *       responses:
 *         '200':
 *           description: Server is up and running
 *         default:
 *           description: Something is wrong
 */ // login dealer user
cov_msjtrq8s5().s[40]++;app.post("/login",core.admin_login);/**
 * @swagger
 * /register:
 *   post:
 *     summary: register a new admin
 *     tags: [Product]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Admin'
 *     responses:
 *       200:
 *         description: The ADMIN was successfully created
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Admin'
 *       500:
 *         description: Some server error
 */ //register new dealer
cov_msjtrq8s5().s[41]++;app.post('/register',core.admin_register);/**
 * @swagger
 * /register:
 *   put:
 *     summary: register a new admin
 *     tags: [Product]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Admin'
 *     responses:
 *       200:
 *         description: The ADMIN was successfully created
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Admin'
 *       500:
 *         description: Some server error
 */ //edit admin deatils
cov_msjtrq8s5().s[42]++;app.put("/:id",CheckAuth,core.admin_edit_by_id);/**
 * @swagger
 * /admin/:id:
 *   delete:
 *    discription: Get admin with check_auth
 *    responses:
 *      '200':
 *       description:Success
 *   /ping:
 *     get:
 *       summary: Checks if the server is running
 *       security: []   # No security
 *       responses:
 *         '200':
 *           description: Server is up and running
 *         default:
 *           description: Something is wrong
 */ //delete admin details
cov_msjtrq8s5().s[43]++;app.delete("/:id",CheckAuth,core.admin_delete_by_id);//handing server errors
cov_msjtrq8s5().s[44]++;app.use((req,res,next)=>{cov_msjtrq8s5().f[4]++;const error=(cov_msjtrq8s5().s[45]++,new Error("Not found"));cov_msjtrq8s5().s[46]++;error.status=404;cov_msjtrq8s5().s[47]++;next(error);});cov_msjtrq8s5().s[48]++;app.use((error,req,res,next)=>{cov_msjtrq8s5().f[5]++;cov_msjtrq8s5().s[49]++;res.status((cov_msjtrq8s5().b[1][0]++,error.status)||(cov_msjtrq8s5().b[1][1]++,500));cov_msjtrq8s5().s[50]++;res.json({error:{message:error.message}});});cov_msjtrq8s5().s[51]++;adminserver=app.listen("2000",()=>{cov_msjtrq8s5().f[6]++;cov_msjtrq8s5().s[52]++;return console.log("admin server is running on 2000");});cov_msjtrq8s5().s[53]++;module.exports=adminserver;//401-unauthorised
//500 server down
//402 register error or mongoose error
//# sourceMappingURL=data:application/json;charset=utf-8;base64,